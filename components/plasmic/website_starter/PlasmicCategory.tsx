/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 52K7GWKZcCo6aFrZqDHdPd
// Component: 4pVr3gxDVuEL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 52K7GWKZcCo6aFrZqDHdPd/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 52K7GWKZcCo6aFrZqDHdPd/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 52K7GWKZcCo6aFrZqDHdPd/projectcss
import sty from "./PlasmicCategory.module.css"; // plasmic-import: 4pVr3gxDVuEL/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: GnQE2p8m9g0E/icon
import TrashIcon from "./icons/PlasmicIcon__Trash"; // plasmic-import: c7RBwgNMgwmt/icon

createPlasmicElementProxy;

export type PlasmicCategory__VariantMembers = {};
export type PlasmicCategory__VariantsArgs = {};
type VariantPropType = keyof PlasmicCategory__VariantsArgs;
export const PlasmicCategory__VariantProps = new Array<VariantPropType>();

export type PlasmicCategory__ArgsType = {};
type ArgPropType = keyof PlasmicCategory__ArgsType;
export const PlasmicCategory__ArgProps = new Array<ArgPropType>();

export type PlasmicCategory__OverridesType = {
  frame22?: Flex__<"div">;
  frame23?: Flex__<"div">;
  frame28?: Flex__<"div">;
  vuesaxLinearArrowRight?: Flex__<"div">;
  vuesaxLinearArrowRight2?: Flex__<"div">;
  vuesaxLinearTrash?: Flex__<"div">;
  vuesaxLinearTrash2?: Flex__<"div">;
};

export interface DefaultCategoryProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCategory__RenderFunc(props: {
  variants: PlasmicCategory__VariantsArgs;
  args: PlasmicCategory__ArgsType;
  overrides: PlasmicCategory__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame22"}
      data-plasmic-override={overrides.frame22}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame22
      )}
    >
      <div
        data-plasmic-name={"frame23"}
        data-plasmic-override={overrides.frame23}
        className={classNames(projectcss.all, sty.frame23)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yt9Ct
          )}
        >
          {"Lorem ipsum"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__zDfbw
          )}
        >
          {
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et ..."
          }
        </div>
      </div>
      <div
        data-plasmic-name={"frame28"}
        data-plasmic-override={overrides.frame28}
        className={classNames(projectcss.all, sty.frame28)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mOzXn
          )}
        >
          {"Open"}
        </div>
        <div
          data-plasmic-name={"vuesaxLinearArrowRight"}
          data-plasmic-override={overrides.vuesaxLinearArrowRight}
          className={classNames(projectcss.all, sty.vuesaxLinearArrowRight)}
        >
          <div
            data-plasmic-name={"vuesaxLinearArrowRight2"}
            data-plasmic-override={overrides.vuesaxLinearArrowRight2}
            className={classNames(projectcss.all, sty.vuesaxLinearArrowRight2)}
          >
            <ArrowRightIcon
              className={classNames(projectcss.all, sty.svg__ygp17)}
              role={"img"}
            />
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"vuesaxLinearTrash"}
        data-plasmic-override={overrides.vuesaxLinearTrash}
        className={classNames(projectcss.all, sty.vuesaxLinearTrash)}
      >
        <div
          data-plasmic-name={"vuesaxLinearTrash2"}
          data-plasmic-override={overrides.vuesaxLinearTrash2}
          className={classNames(projectcss.all, sty.vuesaxLinearTrash2)}
        >
          <TrashIcon
            className={classNames(projectcss.all, sty.svg___5YwUk)}
            role={"img"}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame22: [
    "frame22",
    "frame23",
    "frame28",
    "vuesaxLinearArrowRight",
    "vuesaxLinearArrowRight2",
    "vuesaxLinearTrash",
    "vuesaxLinearTrash2"
  ],
  frame23: ["frame23"],
  frame28: ["frame28", "vuesaxLinearArrowRight", "vuesaxLinearArrowRight2"],
  vuesaxLinearArrowRight: ["vuesaxLinearArrowRight", "vuesaxLinearArrowRight2"],
  vuesaxLinearArrowRight2: ["vuesaxLinearArrowRight2"],
  vuesaxLinearTrash: ["vuesaxLinearTrash", "vuesaxLinearTrash2"],
  vuesaxLinearTrash2: ["vuesaxLinearTrash2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame22: "div";
  frame23: "div";
  frame28: "div";
  vuesaxLinearArrowRight: "div";
  vuesaxLinearArrowRight2: "div";
  vuesaxLinearTrash: "div";
  vuesaxLinearTrash2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCategory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCategory__VariantsArgs;
    args?: PlasmicCategory__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCategory__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCategory__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCategory__ArgProps,
          internalVariantPropNames: PlasmicCategory__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCategory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame22") {
    func.displayName = "PlasmicCategory";
  } else {
    func.displayName = `PlasmicCategory.${nodeName}`;
  }
  return func;
}

export const PlasmicCategory = Object.assign(
  // Top-level PlasmicCategory renders the root element
  makeNodeComponent("frame22"),
  {
    // Helper components rendering sub-elements
    frame23: makeNodeComponent("frame23"),
    frame28: makeNodeComponent("frame28"),
    vuesaxLinearArrowRight: makeNodeComponent("vuesaxLinearArrowRight"),
    vuesaxLinearArrowRight2: makeNodeComponent("vuesaxLinearArrowRight2"),
    vuesaxLinearTrash: makeNodeComponent("vuesaxLinearTrash"),
    vuesaxLinearTrash2: makeNodeComponent("vuesaxLinearTrash2"),

    // Metadata about props expected for PlasmicCategory
    internalVariantProps: PlasmicCategory__VariantProps,
    internalArgProps: PlasmicCategory__ArgProps
  }
);

export default PlasmicCategory;
/* prettier-ignore-end */
