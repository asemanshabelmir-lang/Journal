/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 52K7GWKZcCo6aFrZqDHdPd
// Component: vK-7aGybC8A8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 52K7GWKZcCo6aFrZqDHdPd/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 52K7GWKZcCo6aFrZqDHdPd/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 52K7GWKZcCo6aFrZqDHdPd/projectcss
import sty from "./PlasmicHeaderTable.module.css"; // plasmic-import: vK-7aGybC8A8/css

createPlasmicElementProxy;

export type PlasmicHeaderTable__VariantMembers = {};
export type PlasmicHeaderTable__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeaderTable__VariantsArgs;
export const PlasmicHeaderTable__VariantProps = new Array<VariantPropType>();

export type PlasmicHeaderTable__ArgsType = {};
type ArgPropType = keyof PlasmicHeaderTable__ArgsType;
export const PlasmicHeaderTable__ArgProps = new Array<ArgPropType>();

export type PlasmicHeaderTable__OverridesType = {
  frame41?: Flex__<"div">;
  frame29?: Flex__<"div">;
  frame35?: Flex__<"div">;
  frame30?: Flex__<"div">;
  frame31?: Flex__<"div">;
  frame32?: Flex__<"div">;
  frame33?: Flex__<"div">;
  frame34?: Flex__<"div">;
  frame37?: Flex__<"div">;
  frame38?: Flex__<"div">;
  frame39?: Flex__<"div">;
  frame40?: Flex__<"div">;
};

export interface DefaultHeaderTableProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeaderTable__RenderFunc(props: {
  variants: PlasmicHeaderTable__VariantsArgs;
  args: PlasmicHeaderTable__ArgsType;
  overrides: PlasmicHeaderTable__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame41"}
      data-plasmic-override={overrides.frame41}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame41
      )}
    >
      <div
        data-plasmic-name={"frame29"}
        data-plasmic-override={overrides.frame29}
        className={classNames(projectcss.all, sty.frame29)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___6A4AL
          )}
        >
          {"#"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame35"}
        data-plasmic-override={overrides.frame35}
        className={classNames(projectcss.all, sty.frame35)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___1WuLi
          )}
        >
          {"Date"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame30"}
        data-plasmic-override={overrides.frame30}
        className={classNames(projectcss.all, sty.frame30)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__q9J
          )}
        >
          {"Symbols"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame31"}
        data-plasmic-override={overrides.frame31}
        className={classNames(projectcss.all, sty.frame31)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__htr2L
          )}
        >
          {"Position"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame32"}
        data-plasmic-override={overrides.frame32}
        className={classNames(projectcss.all, sty.frame32)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__elgD8
          )}
        >
          {"Entry"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame33"}
        data-plasmic-override={overrides.frame33}
        className={classNames(projectcss.all, sty.frame33)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qvkc6
          )}
        >
          {"Stop Loss"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame34"}
        data-plasmic-override={overrides.frame34}
        className={classNames(projectcss.all, sty.frame34)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xaqKx
          )}
        >
          {"Risk (%)"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame37"}
        data-plasmic-override={overrides.frame37}
        className={classNames(projectcss.all, sty.frame37)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__w9Sle
          )}
        >
          {"Result"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame38"}
        data-plasmic-override={overrides.frame38}
        className={classNames(projectcss.all, sty.frame38)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__uHgE9
          )}
        >
          {"Session"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame39"}
        data-plasmic-override={overrides.frame39}
        className={classNames(projectcss.all, sty.frame39)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ioCp5
          )}
        >
          {"Strategy"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame40"}
        data-plasmic-override={overrides.frame40}
        className={classNames(projectcss.all, sty.frame40)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__egMqt
          )}
        >
          {"Details"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame41: [
    "frame41",
    "frame29",
    "frame35",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "frame34",
    "frame37",
    "frame38",
    "frame39",
    "frame40"
  ],
  frame29: ["frame29"],
  frame35: ["frame35"],
  frame30: ["frame30"],
  frame31: ["frame31"],
  frame32: ["frame32"],
  frame33: ["frame33"],
  frame34: ["frame34"],
  frame37: ["frame37"],
  frame38: ["frame38"],
  frame39: ["frame39"],
  frame40: ["frame40"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame41: "div";
  frame29: "div";
  frame35: "div";
  frame30: "div";
  frame31: "div";
  frame32: "div";
  frame33: "div";
  frame34: "div";
  frame37: "div";
  frame38: "div";
  frame39: "div";
  frame40: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderTable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderTable__VariantsArgs;
    args?: PlasmicHeaderTable__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeaderTable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeaderTable__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeaderTable__ArgProps,
          internalVariantPropNames: PlasmicHeaderTable__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeaderTable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame41") {
    func.displayName = "PlasmicHeaderTable";
  } else {
    func.displayName = `PlasmicHeaderTable.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderTable = Object.assign(
  // Top-level PlasmicHeaderTable renders the root element
  makeNodeComponent("frame41"),
  {
    // Helper components rendering sub-elements
    frame29: makeNodeComponent("frame29"),
    frame35: makeNodeComponent("frame35"),
    frame30: makeNodeComponent("frame30"),
    frame31: makeNodeComponent("frame31"),
    frame32: makeNodeComponent("frame32"),
    frame33: makeNodeComponent("frame33"),
    frame34: makeNodeComponent("frame34"),
    frame37: makeNodeComponent("frame37"),
    frame38: makeNodeComponent("frame38"),
    frame39: makeNodeComponent("frame39"),
    frame40: makeNodeComponent("frame40"),

    // Metadata about props expected for PlasmicHeaderTable
    internalVariantProps: PlasmicHeaderTable__VariantProps,
    internalArgProps: PlasmicHeaderTable__ArgProps
  }
);

export default PlasmicHeaderTable;
/* prettier-ignore-end */
