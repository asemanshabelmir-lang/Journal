/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jNLLztuNGViHKFo35zGuKj
// Component: A8BT-M4yNyN4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: jNLLztuNGViHKFo35zGuKj/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: jNLLztuNGViHKFo35zGuKj/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: jNLLztuNGViHKFo35zGuKj/projectcss
import sty from "./PlasmicItemTable.module.css"; // plasmic-import: A8BT-M4yNyN4/css

import EditIcon from "./icons/PlasmicIcon__Edit"; // plasmic-import: tg-Vi8SpezSb/icon
import Trash2Icon from "./icons/PlasmicIcon__Trash2"; // plasmic-import: 1cePlUuPwWRf/icon

createPlasmicElementProxy;

export type PlasmicItemTable__VariantMembers = {};
export type PlasmicItemTable__VariantsArgs = {};
type VariantPropType = keyof PlasmicItemTable__VariantsArgs;
export const PlasmicItemTable__VariantProps = new Array<VariantPropType>();

export type PlasmicItemTable__ArgsType = {};
type ArgPropType = keyof PlasmicItemTable__ArgsType;
export const PlasmicItemTable__ArgProps = new Array<ArgPropType>();

export type PlasmicItemTable__OverridesType = {
  frame42?: Flex__<"div">;
  frame36?: Flex__<"div">;
  frame43?: Flex__<"div">;
  frame44?: Flex__<"div">;
  frame45?: Flex__<"div">;
  frame48?: Flex__<"div">;
  frame49?: Flex__<"div">;
  frame50?: Flex__<"div">;
  frame51?: Flex__<"div">;
  frame52?: Flex__<"div">;
  frame53?: Flex__<"div">;
  frame54?: Flex__<"div">;
  vuesaxBulkEdit?: Flex__<"div">;
  vuesaxBulkEdit2?: Flex__<"div">;
  vuesaxBulkTrash?: Flex__<"div">;
  vuesaxBulkTrash2?: Flex__<"div">;
};

export interface DefaultItemTableProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItemTable__RenderFunc(props: {
  variants: PlasmicItemTable__VariantsArgs;
  args: PlasmicItemTable__ArgsType;
  overrides: PlasmicItemTable__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();

  return (
    <div
      data-plasmic-name={"frame42"}
      data-plasmic-override={overrides.frame42}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        styleTokensClassNames_library_tailwind_3_4_colors,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        sty.frame42
      )}
    >
      <div
        data-plasmic-name={"frame36"}
        data-plasmic-override={overrides.frame36}
        className={classNames(projectcss.all, sty.frame36)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__zxry
          )}
        >
          {"1"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame43"}
        data-plasmic-override={overrides.frame43}
        className={classNames(projectcss.all, sty.frame43)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__myFa
          )}
        >
          {"27 "}
        </div>
      </div>
      <div
        data-plasmic-name={"frame44"}
        data-plasmic-override={overrides.frame44}
        className={classNames(projectcss.all, sty.frame44)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__eWgDk
          )}
        >
          {"EURUSD"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame45"}
        data-plasmic-override={overrides.frame45}
        className={classNames(projectcss.all, sty.frame45)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qScyU
          )}
        >
          {"Buy"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame48"}
        data-plasmic-override={overrides.frame48}
        className={classNames(projectcss.all, sty.frame48)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__oYaHs
          )}
        >
          {"1.092"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame49"}
        data-plasmic-override={overrides.frame49}
        className={classNames(projectcss.all, sty.frame49)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___5QpdZ
          )}
        >
          {"1.0915"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame50"}
        data-plasmic-override={overrides.frame50}
        className={classNames(projectcss.all, sty.frame50)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2Gtaj
          )}
        >
          {"1%"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame51"}
        data-plasmic-override={overrides.frame51}
        className={classNames(projectcss.all, sty.frame51)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lR1Sy
          )}
        >
          {"Win"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame52"}
        data-plasmic-override={overrides.frame52}
        className={classNames(projectcss.all, sty.frame52)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hBnM6
          )}
        >
          {"London"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame53"}
        data-plasmic-override={overrides.frame53}
        className={classNames(projectcss.all, sty.frame53)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__f8NJe
          )}
        >
          {"FTR"}
        </div>
      </div>
      <div
        data-plasmic-name={"frame54"}
        data-plasmic-override={overrides.frame54}
        className={classNames(projectcss.all, sty.frame54)}
      >
        <div
          data-plasmic-name={"vuesaxBulkEdit"}
          data-plasmic-override={overrides.vuesaxBulkEdit}
          className={classNames(projectcss.all, sty.vuesaxBulkEdit)}
        >
          <div
            data-plasmic-name={"vuesaxBulkEdit2"}
            data-plasmic-override={overrides.vuesaxBulkEdit2}
            className={classNames(projectcss.all, sty.vuesaxBulkEdit2)}
          >
            <EditIcon
              className={classNames(projectcss.all, sty.svg__abBfk)}
              role={"img"}
            />
          </div>
        </div>
        <div
          data-plasmic-name={"vuesaxBulkTrash"}
          data-plasmic-override={overrides.vuesaxBulkTrash}
          className={classNames(projectcss.all, sty.vuesaxBulkTrash)}
        >
          <div
            data-plasmic-name={"vuesaxBulkTrash2"}
            data-plasmic-override={overrides.vuesaxBulkTrash2}
            className={classNames(projectcss.all, sty.vuesaxBulkTrash2)}
          >
            <Trash2Icon
              className={classNames(projectcss.all, sty.svg__i3Tvl)}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame42: [
    "frame42",
    "frame36",
    "frame43",
    "frame44",
    "frame45",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "frame52",
    "frame53",
    "frame54",
    "vuesaxBulkEdit",
    "vuesaxBulkEdit2",
    "vuesaxBulkTrash",
    "vuesaxBulkTrash2"
  ],
  frame36: ["frame36"],
  frame43: ["frame43"],
  frame44: ["frame44"],
  frame45: ["frame45"],
  frame48: ["frame48"],
  frame49: ["frame49"],
  frame50: ["frame50"],
  frame51: ["frame51"],
  frame52: ["frame52"],
  frame53: ["frame53"],
  frame54: [
    "frame54",
    "vuesaxBulkEdit",
    "vuesaxBulkEdit2",
    "vuesaxBulkTrash",
    "vuesaxBulkTrash2"
  ],
  vuesaxBulkEdit: ["vuesaxBulkEdit", "vuesaxBulkEdit2"],
  vuesaxBulkEdit2: ["vuesaxBulkEdit2"],
  vuesaxBulkTrash: ["vuesaxBulkTrash", "vuesaxBulkTrash2"],
  vuesaxBulkTrash2: ["vuesaxBulkTrash2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame42: "div";
  frame36: "div";
  frame43: "div";
  frame44: "div";
  frame45: "div";
  frame48: "div";
  frame49: "div";
  frame50: "div";
  frame51: "div";
  frame52: "div";
  frame53: "div";
  frame54: "div";
  vuesaxBulkEdit: "div";
  vuesaxBulkEdit2: "div";
  vuesaxBulkTrash: "div";
  vuesaxBulkTrash2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicItemTable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicItemTable__VariantsArgs;
    args?: PlasmicItemTable__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicItemTable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicItemTable__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicItemTable__ArgProps,
          internalVariantPropNames: PlasmicItemTable__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItemTable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame42") {
    func.displayName = "PlasmicItemTable";
  } else {
    func.displayName = `PlasmicItemTable.${nodeName}`;
  }
  return func;
}

export const PlasmicItemTable = Object.assign(
  // Top-level PlasmicItemTable renders the root element
  makeNodeComponent("frame42"),
  {
    // Helper components rendering sub-elements
    frame36: makeNodeComponent("frame36"),
    frame43: makeNodeComponent("frame43"),
    frame44: makeNodeComponent("frame44"),
    frame45: makeNodeComponent("frame45"),
    frame48: makeNodeComponent("frame48"),
    frame49: makeNodeComponent("frame49"),
    frame50: makeNodeComponent("frame50"),
    frame51: makeNodeComponent("frame51"),
    frame52: makeNodeComponent("frame52"),
    frame53: makeNodeComponent("frame53"),
    frame54: makeNodeComponent("frame54"),
    vuesaxBulkEdit: makeNodeComponent("vuesaxBulkEdit"),
    vuesaxBulkEdit2: makeNodeComponent("vuesaxBulkEdit2"),
    vuesaxBulkTrash: makeNodeComponent("vuesaxBulkTrash"),
    vuesaxBulkTrash2: makeNodeComponent("vuesaxBulkTrash2"),

    // Metadata about props expected for PlasmicItemTable
    internalVariantProps: PlasmicItemTable__VariantProps,
    internalArgProps: PlasmicItemTable__ArgProps
  }
);

export default PlasmicItemTable;
/* prettier-ignore-end */
