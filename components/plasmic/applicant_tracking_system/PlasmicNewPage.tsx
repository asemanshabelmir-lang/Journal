/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jNLLztuNGViHKFo35zGuKj
// Component: XVZKjWpkb70V

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Header from "../../Header"; // plasmic-import: xbz9C8gCxy1U/component
import Button from "../../Button"; // plasmic-import: Vxt6tbr5o8N2/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: jNLLztuNGViHKFo35zGuKj/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: jNLLztuNGViHKFo35zGuKj/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_colors } from "../library_tailwind_3_4_color_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: jNLLztuNGViHKFo35zGuKj/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: XVZKjWpkb70V/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: lPkzLn-qLjG6/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: yrgrOX0uO6_U/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: 1iooaF0nnjdK/icon
import StarIcon from "./icons/PlasmicIcon__Star"; // plasmic-import: XQX_tRhlpBQE/icon
import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: 4rf7idkydcsv/icon

createPlasmicElementProxy;

export type PlasmicNewPage__VariantMembers = {};
export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: Flex__<"div">;
  figmaPaste?: Flex__<"div">;
  logo?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  figmaPaste2?: Flex__<"div">;
  title?: Flex__<"div">;
  frame122?: Flex__<"div">;
  loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborum?: Flex__<"div">;
  frame123?: Flex__<"div">;
  device?: Flex__<"div">;
  figmaPaste3?: Flex__<"div">;
  rectangle5?: Flex__<"div">;
  group3?: Flex__<"div">;
  group5?: Flex__<"div">;
  group4?: Flex__<"div">;
  group9?: Flex__<"div">;
  rectangle8?: Flex__<"div">;
  clipboardNoteTakingPaper3DIconIllustrationPng1?: Flex__<"div">;
  group2?: Flex__<"div">;
  rectangle3?: Flex__<"div">;
  vecteezy3DCartoonIconChessForMockupTemplatePresentation61651841?: Flex__<"div">;
  group1?: Flex__<"div">;
  rectangle4?: Flex__<"div">;
  preview1?: Flex__<"div">;
  rectangle2?: Flex__<"div">;
  figmaPaste4?: Flex__<"div">;
  _858851?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  frame129?: Flex__<"div">;
  frame128?: Flex__<"div">;
  frame127?: Flex__<"div">;
  frame126?: Flex__<"div">;
  frame52?: Flex__<"div">;
  frame53?: Flex__<"div">;
  frame54?: Flex__<"div">;
  frame3?: Flex__<"div">;
  frame124?: Flex__<"div">;
  frame55?: Flex__<"div">;
  frame56?: Flex__<"div">;
  frame4?: Flex__<"div">;
  frame125?: Flex__<"div">;
  frame57?: Flex__<"div">;
  frame58?: Flex__<"div">;
  frame5?: Flex__<"div">;
  frame9?: Flex__<"div">;
  frame6?: Flex__<"div">;
  googleGLogo1?: Flex__<"div">;
  rectangle111?: Flex__<"div">;
};

export interface DefaultNewPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "header.selectHeader",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Home"
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_library_tailwind_3_4_colors =
    useStyleTokens_library_tailwind_3_4_colors();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            styleTokensClassNames_library_tailwind_3_4_colors,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"figmaPaste"}
            data-plasmic-override={overrides.figmaPaste}
            className={classNames(projectcss.all, sty.figmaPaste)}
          >
            <div
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames(projectcss.all, sty.logo)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__zv61M)}
                displayHeight={"36.000003814697266px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"54.81404495239258px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/applicant_tracking_system/images/logo2.svg",
                  fullWidth: 54.81404495239258,
                  fullHeight: 36.000003814697266,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bwkU0
                )}
              >
                {
                  "\u0646\u0642\u0634\u0647 \u0645\u0639\u0627\u0645\u0644\u0627\u062a"
                }
              </div>
            </div>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
              onSelectHeaderChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "header",
                  "selectHeader"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              selectHeader={generateStateValueProp($state, [
                "header",
                "selectHeader"
              ])}
            />

            <Button
              className={classNames("__wab_instance", sty.button___1000)}
              color={"line"}
              roundedFull={true}
              size={"extraLarge"}
              text={
                "\u0648\u0631\u0648\u062f | \u062b\u0628\u062a \u0646\u0627\u0645"
              }
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__szYdQ)}>
            <div
              data-plasmic-name={"figmaPaste2"}
              data-plasmic-override={overrides.figmaPaste2}
              className={classNames(projectcss.all, sty.figmaPaste2)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__d6Ml)}
                displayHeight={"30px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"30px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/applicant_tracking_system/images/isolationMode.svg",
                  fullWidth: 36,
                  fullHeight: 36,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(projectcss.all, sty.title)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dyrKu
                  )}
                >
                  {
                    "\u06a9\u0634\u0641 \u062f\u0646\u06cc\u0627\u06cc \u06a9\u0631\u06cc\u067e\u062a\u0648 \u0628\u0627"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pF0Ha
                  )}
                >
                  {
                    "\u0628\u0627 \u0646\u0642\u0634\u0647 \u0645\u0639\u0627\u0645\u0644\u0627\u062a"
                  }
                </div>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__qnDsE)}
                displayHeight={"30px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"30px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/applicant_tracking_system/images/isolationMode.svg",
                  fullWidth: 36,
                  fullHeight: 36,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___86Vgw)}>
              <div
                data-plasmic-name={"frame122"}
                data-plasmic-override={overrides.frame122}
                className={classNames(projectcss.all, sty.frame122)}
              >
                <div
                  data-plasmic-name={
                    "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborum"
                  }
                  data-plasmic-override={
                    overrides.loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborum
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborum
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r"
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__f1Wgb)}
                  end={
                    <Icon13Icon
                      className={classNames(projectcss.all, sty.svg__jAGu)}
                      role={"img"}
                    />
                  }
                  iconEnd={true}
                  roundedFull={true}
                  size={"extraLarge"}
                  text={
                    "\u0631\u0627\u06cc\u06af\u0627\u0646 \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u062f"
                  }
                />
              </div>
              <div
                data-plasmic-name={"frame123"}
                data-plasmic-override={overrides.frame123}
                className={classNames(projectcss.all, sty.frame123)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__lyIEf)}
                  displayHeight={"376px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"585px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/applicant_tracking_system/images/screen.svg",
                    fullWidth: 585,
                    fullHeight: 376,
                    aspectRatio: undefined
                  }}
                />

                <div
                  data-plasmic-name={"device"}
                  data-plasmic-override={overrides.device}
                  className={classNames(projectcss.all, sty.device)}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"figmaPaste3"}
              data-plasmic-override={overrides.figmaPaste3}
              className={classNames(projectcss.all, sty.figmaPaste3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fw9Lm
                )}
              >
                {"Lorem ipsum dolor sit amet?"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__dMpuH)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
                  2, 3, 4
                ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      data-plasmic-name={"rectangle5"}
                      data-plasmic-override={overrides.rectangle5}
                      className={classNames(projectcss.all, sty.rectangle5)}
                      key={currentIndex}
                    >
                      <div
                        data-plasmic-name={"group3"}
                        data-plasmic-override={overrides.group3}
                        className={classNames(projectcss.all, sty.group3)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vFfZ
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gfvQj
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__owIIn)}
                              displayHeight={"40px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"40px"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/applicant_tracking_system/images/ellipse1.svg",
                                fullWidth: 40,
                                fullHeight: 40,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tAy2
                              )}
                            >
                              {"Nokindow"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"group5"}
                            data-plasmic-override={overrides.group5}
                            className={classNames(projectcss.all, sty.group5)}
                          >
                            <StarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__uvrPt
                              )}
                              role={"img"}
                            />

                            <StarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__caWjv
                              )}
                              role={"img"}
                            />

                            <StarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ylKfw
                              )}
                              role={"img"}
                            />

                            <StarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wr9V5
                              )}
                              role={"img"}
                            />

                            <StarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__tl2Ap
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pKl6M
                          )}
                        >
                          {
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad ..."
                          }
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
            <div
              data-plasmic-name={"group4"}
              data-plasmic-override={overrides.group4}
              className={classNames(projectcss.all, sty.group4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nt9HZ
                )}
              >
                {"Lorem ipsum dolor sit amet?"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ushGt)}>
                <div
                  data-plasmic-name={"group9"}
                  data-plasmic-override={overrides.group9}
                  className={classNames(projectcss.all, sty.group9)}
                >
                  <div
                    data-plasmic-name={"rectangle8"}
                    data-plasmic-override={overrides.rectangle8}
                    className={classNames(projectcss.all, sty.rectangle8)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jnq3A
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor ..."
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aBmNj
                    )}
                  >
                    {"Journal"}
                  </div>
                  <div
                    data-plasmic-name={
                      "clipboardNoteTakingPaper3DIconIllustrationPng1"
                    }
                    data-plasmic-override={
                      overrides.clipboardNoteTakingPaper3DIconIllustrationPng1
                    }
                    className={classNames(
                      projectcss.all,
                      sty.clipboardNoteTakingPaper3DIconIllustrationPng1
                    )}
                  />
                </div>
                <div
                  data-plasmic-name={"group2"}
                  data-plasmic-override={overrides.group2}
                  className={classNames(projectcss.all, sty.group2)}
                >
                  <div
                    data-plasmic-name={"rectangle3"}
                    data-plasmic-override={overrides.rectangle3}
                    className={classNames(projectcss.all, sty.rectangle3)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kesC
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor ..."
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fvTf4
                    )}
                  >
                    {"Strategy"}
                  </div>
                  <div
                    data-plasmic-name={
                      "vecteezy3DCartoonIconChessForMockupTemplatePresentation61651841"
                    }
                    data-plasmic-override={
                      overrides.vecteezy3DCartoonIconChessForMockupTemplatePresentation61651841
                    }
                    className={classNames(
                      projectcss.all,
                      sty.vecteezy3DCartoonIconChessForMockupTemplatePresentation61651841
                    )}
                  />
                </div>
                <div
                  data-plasmic-name={"group1"}
                  data-plasmic-override={overrides.group1}
                  className={classNames(projectcss.all, sty.group1)}
                >
                  <div
                    data-plasmic-name={"rectangle4"}
                    data-plasmic-override={overrides.rectangle4}
                    className={classNames(projectcss.all, sty.rectangle4)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cWywv
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor ..."
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fnmdg
                    )}
                  >
                    {"Analysis"}
                  </div>
                  <div
                    data-plasmic-name={"preview1"}
                    data-plasmic-override={overrides.preview1}
                    className={classNames(projectcss.all, sty.preview1)}
                  />
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"rectangle2"}
              data-plasmic-override={overrides.rectangle2}
              className={classNames(projectcss.all, sty.rectangle2)}
            >
              <div
                data-plasmic-name={"figmaPaste4"}
                data-plasmic-override={overrides.figmaPaste4}
                className={classNames(projectcss.all, sty.figmaPaste4)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__moYsZ
                  )}
                >
                  {"Lorem ipsum dolor\nsit amet, consectetur"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wJpui
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"_858851"}
                data-plasmic-override={overrides._858851}
                className={classNames(projectcss.all, sty._858851)}
              />
            </div>
          </div>
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_plasmic_rich_components,
              styleTokensClassNames_library_tailwind_3_4_colors,
              styleTokensClassNames_library_tailwind_3_4_number_tokens
            )}
            hideFooter={true}
            maskClosable={true}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
            trigger={null}
            width={"100vw"}
          >
            <div
              data-plasmic-name={"frame129"}
              data-plasmic-override={overrides.frame129}
              className={classNames(projectcss.all, sty.frame129)}
            >
              <div
                data-plasmic-name={"frame128"}
                data-plasmic-override={overrides.frame128}
                className={classNames(projectcss.all, sty.frame128)}
              >
                <div
                  data-plasmic-name={"frame127"}
                  data-plasmic-override={overrides.frame127}
                  className={classNames(projectcss.all, sty.frame127)}
                >
                  <div
                    data-plasmic-name={"frame126"}
                    data-plasmic-override={overrides.frame126}
                    className={classNames(projectcss.all, sty.frame126)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Gf0Y
                      )}
                    >
                      {"Sign up"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zs6Bs)}
                    >
                      <Line3Icon
                        className={classNames(projectcss.all, sty.svg___01AmT)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"frame52"}
                      data-plasmic-override={overrides.frame52}
                      className={classNames(projectcss.all, sty.frame52)}
                    >
                      <div
                        data-plasmic-name={"frame53"}
                        data-plasmic-override={overrides.frame53}
                        className={classNames(projectcss.all, sty.frame53)}
                      >
                        <div
                          data-plasmic-name={"frame54"}
                          data-plasmic-override={overrides.frame54}
                          className={classNames(projectcss.all, sty.frame54)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fte4J
                            )}
                          >
                            {"What's your name?"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame3"}
                          data-plasmic-override={overrides.frame3}
                          className={classNames(projectcss.all, sty.frame3)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__p2EA
                            )}
                          >
                            {"Lorem ipsum dolor sit amet"}
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame124"}
                      data-plasmic-override={overrides.frame124}
                      className={classNames(projectcss.all, sty.frame124)}
                    >
                      <div
                        data-plasmic-name={"frame55"}
                        data-plasmic-override={overrides.frame55}
                        className={classNames(projectcss.all, sty.frame55)}
                      >
                        <div
                          data-plasmic-name={"frame56"}
                          data-plasmic-override={overrides.frame56}
                          className={classNames(projectcss.all, sty.frame56)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__shuMz
                            )}
                          >
                            {"Email"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame4"}
                          data-plasmic-override={overrides.frame4}
                          className={classNames(projectcss.all, sty.frame4)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qrpd
                            )}
                          >
                            {"Lorem ipsum dolor sit amet"}
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame125"}
                      data-plasmic-override={overrides.frame125}
                      className={classNames(projectcss.all, sty.frame125)}
                    >
                      <div
                        data-plasmic-name={"frame57"}
                        data-plasmic-override={overrides.frame57}
                        className={classNames(projectcss.all, sty.frame57)}
                      >
                        <div
                          data-plasmic-name={"frame58"}
                          data-plasmic-override={overrides.frame58}
                          className={classNames(projectcss.all, sty.frame58)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0WgWv
                            )}
                          >
                            {"Password"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame5"}
                          data-plasmic-override={overrides.frame5}
                          className={classNames(projectcss.all, sty.frame5)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lrpdZ
                            )}
                          >
                            {"Lorem ipsum dolor sit amet"}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame9"}
                    data-plasmic-override={overrides.frame9}
                    className={classNames(projectcss.all, sty.frame9)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gwXM
                      )}
                    >
                      {"Sign up"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vHnaq)}
                  >
                    <Line3Icon
                      className={classNames(projectcss.all, sty.svg__alLuy)}
                      role={"img"}
                    />
                  </div>
                  <div
                    data-plasmic-name={"frame6"}
                    data-plasmic-override={overrides.frame6}
                    className={classNames(projectcss.all, sty.frame6)}
                  >
                    <div
                      data-plasmic-name={"googleGLogo1"}
                      data-plasmic-override={overrides.googleGLogo1}
                      className={classNames(projectcss.all, sty.googleGLogo1)}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ka1N0
                      )}
                    >
                      {"Sign up with Google"}
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tHwYk
                  )}
                >
                  {"Already have an account? Login"}
                </div>
              </div>
              <div
                data-plasmic-name={"rectangle111"}
                data-plasmic-override={overrides.rectangle111}
                className={classNames(projectcss.all, sty.rectangle111)}
              />
            </div>
          </AntdModal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "figmaPaste",
    "logo",
    "header",
    "figmaPaste2",
    "title",
    "frame122",
    "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborum",
    "frame123",
    "device",
    "figmaPaste3",
    "rectangle5",
    "group3",
    "group5",
    "group4",
    "group9",
    "rectangle8",
    "clipboardNoteTakingPaper3DIconIllustrationPng1",
    "group2",
    "rectangle3",
    "vecteezy3DCartoonIconChessForMockupTemplatePresentation61651841",
    "group1",
    "rectangle4",
    "preview1",
    "rectangle2",
    "figmaPaste4",
    "_858851",
    "modal",
    "frame129",
    "frame128",
    "frame127",
    "frame126",
    "frame52",
    "frame53",
    "frame54",
    "frame3",
    "frame124",
    "frame55",
    "frame56",
    "frame4",
    "frame125",
    "frame57",
    "frame58",
    "frame5",
    "frame9",
    "frame6",
    "googleGLogo1",
    "rectangle111"
  ],
  figmaPaste: ["figmaPaste", "logo", "header"],
  logo: ["logo"],
  header: ["header"],
  figmaPaste2: ["figmaPaste2", "title"],
  title: ["title"],
  frame122: [
    "frame122",
    "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborum"
  ],
  loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborum:
    [
      "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborum"
    ],
  frame123: ["frame123", "device"],
  device: ["device"],
  figmaPaste3: ["figmaPaste3", "rectangle5", "group3", "group5"],
  rectangle5: ["rectangle5", "group3", "group5"],
  group3: ["group3", "group5"],
  group5: ["group5"],
  group4: [
    "group4",
    "group9",
    "rectangle8",
    "clipboardNoteTakingPaper3DIconIllustrationPng1",
    "group2",
    "rectangle3",
    "vecteezy3DCartoonIconChessForMockupTemplatePresentation61651841",
    "group1",
    "rectangle4",
    "preview1"
  ],
  group9: [
    "group9",
    "rectangle8",
    "clipboardNoteTakingPaper3DIconIllustrationPng1"
  ],
  rectangle8: ["rectangle8"],
  clipboardNoteTakingPaper3DIconIllustrationPng1: [
    "clipboardNoteTakingPaper3DIconIllustrationPng1"
  ],
  group2: [
    "group2",
    "rectangle3",
    "vecteezy3DCartoonIconChessForMockupTemplatePresentation61651841"
  ],
  rectangle3: ["rectangle3"],
  vecteezy3DCartoonIconChessForMockupTemplatePresentation61651841: [
    "vecteezy3DCartoonIconChessForMockupTemplatePresentation61651841"
  ],
  group1: ["group1", "rectangle4", "preview1"],
  rectangle4: ["rectangle4"],
  preview1: ["preview1"],
  rectangle2: ["rectangle2", "figmaPaste4", "_858851"],
  figmaPaste4: ["figmaPaste4"],
  _858851: ["_858851"],
  modal: [
    "modal",
    "frame129",
    "frame128",
    "frame127",
    "frame126",
    "frame52",
    "frame53",
    "frame54",
    "frame3",
    "frame124",
    "frame55",
    "frame56",
    "frame4",
    "frame125",
    "frame57",
    "frame58",
    "frame5",
    "frame9",
    "frame6",
    "googleGLogo1",
    "rectangle111"
  ],
  frame129: [
    "frame129",
    "frame128",
    "frame127",
    "frame126",
    "frame52",
    "frame53",
    "frame54",
    "frame3",
    "frame124",
    "frame55",
    "frame56",
    "frame4",
    "frame125",
    "frame57",
    "frame58",
    "frame5",
    "frame9",
    "frame6",
    "googleGLogo1",
    "rectangle111"
  ],
  frame128: [
    "frame128",
    "frame127",
    "frame126",
    "frame52",
    "frame53",
    "frame54",
    "frame3",
    "frame124",
    "frame55",
    "frame56",
    "frame4",
    "frame125",
    "frame57",
    "frame58",
    "frame5",
    "frame9",
    "frame6",
    "googleGLogo1"
  ],
  frame127: [
    "frame127",
    "frame126",
    "frame52",
    "frame53",
    "frame54",
    "frame3",
    "frame124",
    "frame55",
    "frame56",
    "frame4",
    "frame125",
    "frame57",
    "frame58",
    "frame5",
    "frame9",
    "frame6",
    "googleGLogo1"
  ],
  frame126: [
    "frame126",
    "frame52",
    "frame53",
    "frame54",
    "frame3",
    "frame124",
    "frame55",
    "frame56",
    "frame4",
    "frame125",
    "frame57",
    "frame58",
    "frame5"
  ],
  frame52: ["frame52", "frame53", "frame54", "frame3"],
  frame53: ["frame53", "frame54", "frame3"],
  frame54: ["frame54"],
  frame3: ["frame3"],
  frame124: ["frame124", "frame55", "frame56", "frame4"],
  frame55: ["frame55", "frame56", "frame4"],
  frame56: ["frame56"],
  frame4: ["frame4"],
  frame125: ["frame125", "frame57", "frame58", "frame5"],
  frame57: ["frame57", "frame58", "frame5"],
  frame58: ["frame58"],
  frame5: ["frame5"],
  frame9: ["frame9"],
  frame6: ["frame6", "googleGLogo1"],
  googleGLogo1: ["googleGLogo1"],
  rectangle111: ["rectangle111"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  figmaPaste: "div";
  logo: "div";
  header: typeof Header;
  figmaPaste2: "div";
  title: "div";
  frame122: "div";
  loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborum: "div";
  frame123: "div";
  device: "div";
  figmaPaste3: "div";
  rectangle5: "div";
  group3: "div";
  group5: "div";
  group4: "div";
  group9: "div";
  rectangle8: "div";
  clipboardNoteTakingPaper3DIconIllustrationPng1: "div";
  group2: "div";
  rectangle3: "div";
  vecteezy3DCartoonIconChessForMockupTemplatePresentation61651841: "div";
  group1: "div";
  rectangle4: "div";
  preview1: "div";
  rectangle2: "div";
  figmaPaste4: "div";
  _858851: "div";
  modal: typeof AntdModal;
  frame129: "div";
  frame128: "div";
  frame127: "div";
  frame126: "div";
  frame52: "div";
  frame53: "div";
  frame54: "div";
  frame3: "div";
  frame124: "div";
  frame55: "div";
  frame56: "div";
  frame4: "div";
  frame125: "div";
  frame57: "div";
  frame58: "div";
  frame5: "div";
  frame9: "div";
  frame6: "div";
  googleGLogo1: "div";
  rectangle111: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "jNLLztuNGViHKFo35zGuKj"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    figmaPaste: makeNodeComponent("figmaPaste"),
    logo: makeNodeComponent("logo"),
    header: makeNodeComponent("header"),
    figmaPaste2: makeNodeComponent("figmaPaste2"),
    title: makeNodeComponent("title"),
    frame122: makeNodeComponent("frame122"),
    loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborum:
      makeNodeComponent(
        "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborum"
      ),
    frame123: makeNodeComponent("frame123"),
    device: makeNodeComponent("device"),
    figmaPaste3: makeNodeComponent("figmaPaste3"),
    rectangle5: makeNodeComponent("rectangle5"),
    group3: makeNodeComponent("group3"),
    group5: makeNodeComponent("group5"),
    group4: makeNodeComponent("group4"),
    group9: makeNodeComponent("group9"),
    rectangle8: makeNodeComponent("rectangle8"),
    clipboardNoteTakingPaper3DIconIllustrationPng1: makeNodeComponent(
      "clipboardNoteTakingPaper3DIconIllustrationPng1"
    ),
    group2: makeNodeComponent("group2"),
    rectangle3: makeNodeComponent("rectangle3"),
    vecteezy3DCartoonIconChessForMockupTemplatePresentation61651841:
      makeNodeComponent(
        "vecteezy3DCartoonIconChessForMockupTemplatePresentation61651841"
      ),
    group1: makeNodeComponent("group1"),
    rectangle4: makeNodeComponent("rectangle4"),
    preview1: makeNodeComponent("preview1"),
    rectangle2: makeNodeComponent("rectangle2"),
    figmaPaste4: makeNodeComponent("figmaPaste4"),
    _858851: makeNodeComponent("_858851"),
    modal: makeNodeComponent("modal"),
    frame129: makeNodeComponent("frame129"),
    frame128: makeNodeComponent("frame128"),
    frame127: makeNodeComponent("frame127"),
    frame126: makeNodeComponent("frame126"),
    frame52: makeNodeComponent("frame52"),
    frame53: makeNodeComponent("frame53"),
    frame54: makeNodeComponent("frame54"),
    frame3: makeNodeComponent("frame3"),
    frame124: makeNodeComponent("frame124"),
    frame55: makeNodeComponent("frame55"),
    frame56: makeNodeComponent("frame56"),
    frame4: makeNodeComponent("frame4"),
    frame125: makeNodeComponent("frame125"),
    frame57: makeNodeComponent("frame57"),
    frame58: makeNodeComponent("frame58"),
    frame5: makeNodeComponent("frame5"),
    frame9: makeNodeComponent("frame9"),
    frame6: makeNodeComponent("frame6"),
    googleGLogo1: makeNodeComponent("googleGLogo1"),
    rectangle111: makeNodeComponent("rectangle111"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
